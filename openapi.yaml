openapi: 3.0.3
info:
  title: Projeto de Gestão de Montagem de Drones
  description: |-
    Desenvolver uma aplicação web para gerir o processo de montagem de drones. A aplicação deve permitir aos utilizadores registar-se, autenticar-se e criar, visualizar, atualizar e eliminar informações relacionadas com a montagem de drones. Os endpoints da API devem ser implementados de acordo com as melhores práticas RESTful. Os endpoints deverão ser documentados em OpenAPI.
  version: 1.0.0
tags:
  - name: drones
    description: Tudo sobre os seus drones
  - name: peças
    description: Quais as peças de cada drone
  - name: user
    description: Operações dos utilizadores
  - name: estatisticas
    description: Estatisticas sobre as montagens de drones
    
paths:
  /drones:
    patch:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updateDrones
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drones'
          application/xml:
            schema:
              $ref: '#/components/schemas/Drones'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Drones'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drones'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Drones'
        '400':
          description: Invalid ID supplied
        '404':
          description: Drones not found
        '422':
          description: Validation exception
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getDronesById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drones'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Drones'
        '400':
          description: Invalid ID supplied
        '404':
          description: Drones not found
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updateDronesWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deleteDrones
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Drones id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
                
                
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
          
          
  /user:
    post:
      tags:
        - user
      summary: Cria um utilizador
      description: Isto só consegue ser feito pelo sign up.
      operationId: createUser
      requestBody:
        description: Criado utilizador.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: operação bem sucedida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/{userId}:
    get:
      tags:
        - user
      summary: Encontrar utilizador pelo seu Id
      description: ''
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'O Id que precisa de ser encontrado.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: operação bem sucedida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalido Id fornecido
        '404':
          description: Utilizador não encontrado
    patch:
      tags:
        - user
      summary: Atualizar utilizador
      description: Isto só pode ser feito por um utilizador logado.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: Id que precisa de ser alterado
          required: true
          schema:
            type: string
      requestBody:
        description: Atualizar utilizador existente 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: operação bem sucedida
    delete:
      tags:
        - user
      summary: Apagar utilizador
      description: Isto só pode ser feito por um utilizador logado.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: O Id que precisa de ser apagado
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalido Id fornecido
        '404':
          description: Utilizador não encontrado
          
          
          
components:
  schemas:
  
  
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
        
        
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
        
        
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userId:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
        
        
    Drones:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
        
        
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
        